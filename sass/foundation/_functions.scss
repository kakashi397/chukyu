@use 'sass:math';

// px→rem(16pxをベースとした場合)
@function rem($pixels, $context: 16) { 
  @return math.div($pixels, $context) * 1rem;
}

// clamp()ジェネレータ
@function clamp-rem($min-vw, $min-size, $max-vw, $max-size, $base-font-size: 16) {
  $slope: ($max-size - $min-size) / ($max-vw - $min-vw) * 100;
  $intercept: $min-size - ($slope * $min-vw / 100);

  $min-rem: $min-size / $base-font-size * 1rem;
  $max-rem: $max-size / $base-font-size * 1rem;
  $intercept-rem: $intercept / $base-font-size * 1rem;

  @return clamp(#{$min-rem}, #{$intercept-rem} + #{$slope}vw, #{$max-rem});
}

// %変換ジェネレータ
@function to-percent($value, $base) {
  @if unitless($value) {
    $value: $value * 1px;
  }
  @if unitless($base) {
    $base: $base * 1px;
  }
  @return math.div($value, $base) * 100%;
}

// スケール関数
// デザインカンプでの基準値を、別の画面幅でスケーリングする関数（単位なし）
// 例：375px のとき 300px → 320px のときは？
// → scale-down(375, 300, 320) → 約256
// ※すべて単位なし（pxの数値）で渡してください
// 例：width: clamp-rem(320, scale(375, 300, 320), 1536, 600);
@function scale($base, $value, $target) {
  @return ($value / $base) * $target;
}
